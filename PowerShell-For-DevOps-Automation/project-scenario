AKS cluster that's connected to ACI:

##Authentication
For the creation of AKS, Terraform will be used. With using Terraform, it will need an authentication method. To use authentication, you will create an app registration.

The app registration will have a client ID and you will need to create a secret.

##Using secrets
An Azure Key Vault will be created to store the client ID and the client secret, which will be used in the CICD pipeline. The key vault script can be found under the Key-Vault directory.

*Please ensure that the pipelines client ID has access to the key vault. Because the pipeline will pull secrets from the key vault, the pipeline will need access to said key vault.*

For more information that needs to be done for the pre-reqs regarding the app registration for authentication from the pipeline to key vault, check out the official docs ![here](https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md) under the pre-req section.

The service connection client ID/app ID is under the DevOps organization --> Project --> Project Settings --> Service Connections. If you click on the service connection --> Manage service connections, you will be brought to the Azure portal where you can copy the Object ID.

##Storage
The Terraform state needs to be stored in a storage account. You will use AZ CLI and PowerShell to create the storage account, which will then be deployed via Azure DevOps

2. PowerShell creates burst instances from AKS to ACI by deploying the ACI connector. This is for your Kubernetes cluster to spin up containers within ACI rather than on pre-provisioned virtual machines (worker nodes) (https://docs.microsoft.com/en-us/samples/azure-samples/virtual-kubelet-aci-burst/bursting-from-aks-to-aci-with-the-virtual-kubelet/)
3. PowerShell connects a storage account to ACI 
